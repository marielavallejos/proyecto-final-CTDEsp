'use client'
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import BodySingle from "components/layouts/body/single/body-single";
import LayoutGeneral from 'components/layouts/layout-general';
import ImageCarousel from 'components/layouts/ui/carrousel/carrousel';
import { Grid, ThemeProvider, createTheme } from '@mui/material';
import ComoFunciona from 'components/layouts/como-funciona/como-funciona';
import Newsletter from 'components/layouts/newsletter/newsletter';
import FooterAccesos from 'components/layouts/footer-accesos/footer-accesos.component';
import SobreNosotros from 'components/layouts/sobre-nosotros/sobre-nosotros';
import Alianzas from 'components/layouts/alianzas/alianzas';
import SimpleCall from 'components/layouts/call-to-actions/simple-call';
import ReporteLanding from 'components/layouts/reporte-landing/reporte-landing';
import BigCall from 'components/layouts/call-to-actions/big-call';
import Noticias from 'components/layouts/noticias/noticias';
import CardsLanding from 'components/layouts/cards-landing/cards-landing';
import { getProyectos } from 'services/proyectos/proyectos.service';
import { ProyectoFinal, Proyectos } from 'interfaces/proyect.type';
import { Spinner } from 'components/layouts/ui/spinner';
import { useEffect, useState } from 'react';

const theme = createTheme({
  typography: {
    fontFamily: [
      'sans-serif',
      'Roboto',
    ].join(','),
  },
});

interface Props {
  proyectos: ProyectoFinal[]
  proyectosCargados: boolean
}


// const Index: NextPage<Props> = ({ proyectos, proyectosCargados }: Props) => {
const Index = () => {
  const [proyectos, setProyectos] = useState<ProyectoFinal[]>([])
  const [proyecosCargados, setProyecosCargados] = useState(false)

  

  // eslint-disable-next-line react-hooks/rules-of-hooks
  useEffect(() => {
    const fetchData = async () => {
      const proyectos = await getProyectos(0, 4);
      setProyectos(proyectos)
      setProyecosCargados(true)
    }
    fetchData()
  }, [])
  if (!proyecosCargados) {
    return (

      <Spinner />

    );
  }

  return (
    <LayoutGeneral>
      <Head>
        <title>Wowfunding</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ThemeProvider theme={theme}>

        <Grid sx={{ width: "100vw" }}>
          <BodySingle title={""}>
            <ImageCarousel />
            <div>
              <SimpleCall />

              <CardsLanding listaProyectos={proyectos} />

              <ComoFunciona />
              <ReporteLanding />
              <BigCall image="/people-working-as-team-company.jpg"
                smallTitle='Sumate para ser el cambio'
                title='Tu contribución cuenta. Dona ahora y sé parte del cambio.'
                color="white"
                buttonText="Inicia tu proyecto"
              />
              <SobreNosotros />
              <Alianzas />
              <BigCall
                image="/group-people-working-out-business-plan-office.jpg"
                smallTitle='Apoya Proyectos Innovadores'
                title='Tu contribución hace realidad ideas brillantes.'
                color="white"
                buttonText="Explora Proyectos"
              />
              <Noticias />
              <Newsletter />

              <FooterAccesos />
            </div>
          </BodySingle>
        </Grid>
      </ThemeProvider >
    </LayoutGeneral>

  )
}

// export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
//   try {
//     const proyectos = await getProyectos(0, 10);

//     res.setHeader('Cache-Control', 'public, s-maxage=10, stale-while-revalidate');

//     return {
//       props: {
//         proyectos: proyectos,
//         proyectosCargados: true
//       },
//     };
//   } catch (error) {
//     console.error('Error al cargar proyectos', error);
//     return {
//       props: {
//         proyectos: [],
//         proyectosCargados: false
//       },
//     };
//   }
// };


export default Index
